/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        left: left {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT";
            bindings = <&kp H>, <&kp LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        down: down {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN";
            bindings = <&kp J>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        up: up {
            compatible = "zmk,behavior-mod-morph";
            label = "UP";
            bindings = <&kp K>, <&kp UP>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        right: right {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT";
            bindings = <&kp L>, <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        gaming: gaming {
            compatible = "zmk,behavior-tap-dance";
            label = "GAMING";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_ALT>, <&kp RIGHT_ALT>, <&tog 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Y    &kp U          &kp I      &kp O    &kp P     &kp ESCAPE
&kp LCTRL  &kp A  &kp S  &kp D             &kp F  &kp G        &left    &down          &up        &right   &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C             &kp V  &kp B        &kp N    &kp M          &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                         &kp LEFT_COMMAND  &mo 1  &kp SPACE    &kp RET  &kp BACKSPACE  &gaming
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL      &kp AT        &kp HASH          &kp DOLLAR    &kp PERCENT         &kp CARET          &kp AMPERSAND  &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH
&kp LCTRL  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3      &kp NUMBER_4  &kp NUMBER_5        &kp NUMBER_6       &kp NUMBER_7   &kp NUMBER_8   &kp NUMBER_9          &kp NUMBER_0           &kp PIPE
&kp LSHFT  &kp TILDE     &kp GRAVE     &kp UNDERSCORE    &kp EQUAL     &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp PLUS       &kp MINUS      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp RSHIFT
                                       &kp LEFT_COMMAND  &trans        &kp SPACE           &kp RET            &kp BACKSPACE  &kp RIGHT_ALT
            >;
        };

        layer_2 {
            bindings = <
&kp NUMBER_0      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &trans  &trans  &trans          &trans  &trans  &trans
&kp LEFT_CONTROL  &trans        &kp Q         &kp W         &kp E         &kp R           &trans  &trans  &trans          &trans  &trans  &trans
&kp LEFT_SHIFT    &trans        &kp A         &kp S         &kp D         &kp F           &trans  &trans  &bt BT_CLR_ALL  &trans  &trans  &trans
                                              &trans        &to 0         &kp SPACE       &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
